"""
Напишите программу, которая принимает на стандартный вход список игр футбольных команд с результатом матча и выводит на стандартный вывод сводную таблицу результатов всех матчей.

За победу команде начисляется 3 очка, за поражение — 0, за ничью — 1.

Формат ввода следующий:
В первой строке указано целое число n
— количество завершенных игр.
После этого идет n

строк, в которых записаны результаты игры в следующем формате:
Первая_команда;Забито_первой_командой;Вторая_команда;Забито_второй_командой

Вывод программы необходимо оформить следующим образом:
Команда:Всего_игр Побед Ничьих Поражений Всего_очков

Конкретный пример ввода-вывода приведён ниже.

Порядок вывода команд произвольный.

Sample Input:

3
Зенит;3;Спартак;1
Спартак;1;ЦСКА;1
ЦСКА;0;Зенит;2

Sample Output:

Зенит:2 2 0 0 6
ЦСКА:2 0 1 1 1
Спартак:2 0 1 1 1
"""
n=int(input())
d={}
for i in range(n):
	x=input().split(';')
	if x[0] in d:
		d[x[0]]['cnt']+=1
		d[x[0]]['w']+=int(int(x[1])>int(x[3]))
		d[x[0]]['f']+=int(int(x[1])<int(x[3]))
		d[x[0]]['o']+=int(int(x[1])==int(x[3]))
	else:
		d[x[0]]={'cnt':1,'w': int(int(x[1])>int(x[3])),'f': int(int(x[1])<int(x[3])),'o':int(int(x[1])==int(x[3]))}
	if x[2] in d:
		d[x[2]]['cnt']+=1
		d[x[2]]['w']+=int(int(x[3])>int(x[1]))
		d[x[2]]['f']+=int(int(x[3])<int(x[1]))
		d[x[2]]['o']+=int(int(x[3])==int(x[1]))
	else:
		d[x[2]]={'cnt':1,'w': int(int(x[3])>int(x[1])),'f': int(int(x[3])<int(x[1])),'o':int(int(x[3])==int(x[1]))}
for i in d:
	print(i+':'+str(d[i]['cnt']),d[i]['w'],d[i]['o'],d[i]['f'],(d[i]['w']*3+d[i]['o']))

"""
В какой-то момент в Институте биоинформатики биологи перестали понимать, что говорят информатики: они говорили каким-то странным набором звуков. 

В какой-то момент один из биологов раскрыл секрет информатиков: они использовали при общении подстановочный шифр, т.е. заменяли каждый символ исходного сообщения на соответствующий ему другой символ. Биологи раздобыли ключ к шифру и теперь нуждаются в помощи: 

Напишите программу, которая умеет шифровать и расшифровывать шифр подстановки. Программа принимает на вход две строки одинаковой длины, на первой строке записаны символы исходного алфавита, на второй строке — символы конечного алфавита, после чего идёт строка, которую нужно зашифровать переданным ключом, и ещё одна строка, которую нужно расшифровать.

Пусть, например, на вход программе передано:
abcd
*d%#
abacabadaba
#*%*d*%

Это значит, что символ a исходного сообщения заменяется на символ * в шифре, b заменяется на d, c — на % и d — на #.
Нужно зашифровать строку abacabadaba и расшифровать строку #*%*d*% с помощью этого шифра. Получаем следующие строки, которые и передаём на вывод программы:
*d*%*d*#*d*
dacabac

Sample Input 1:

abcd
*d%#
abacabadaba
#*%*d*%

Sample Output 1:

*d*%*d*#*d*
dacabac


Sample Input 2:

dcba
badc
dcba
badc

Sample Output 2:

badc
dcba
"""
s0=[i for i in input()]
s1=[i for i in input()]
d={}
for i in range(len(s0)):
	d[s0[i]]=s1[i]
for i in input():
	print(d[i],end='')
print()
for i in input():
	for j in d:
		if i==d[j]:
			print(j,end='')

"""
Простейшая система проверки орфографии основана на использовании списка известных слов. Каждое слово в проверяемом тексте ищется в этом списке и, если такое слово не найдено, оно помечается, как ошибочное.

Напишем подобную систему.

Через стандартный ввод подаётся следующая структура: первой строкой — количество d
записей в списке известных слов, после передаётся  d строк с одним словарным словом на строку, затем — количество l строк текста, после чего — l

строк текста.

Напишите программу, которая выводит слова из текста, которые не встречаются в словаре. Регистр слов не учитывается. Порядок вывода слов произвольный. Слова, не встречающиеся в словаре, не должны повторяться в выводе программы.

Sample Input:

3
a
bb
cCc
2
a bb aab aba ccc
c bb aaa

Sample Output:

aab
aba
c
aaa
"""
n=int(input())
d=[]
for i in range(n):
	d.append(input().lower())
#t=[]
e=[]
n=int(input())
for i in range(n):
	#t.append(input())
	for x in input().split():
		if (not x.lower() in d) and (not x.lower() in e):
			e.append(x.lower())
for i in e:
	print(i)

"""
Группа биологов в институте биоинформатики завела себе черепашку.

После дрессировки черепашка научилась понимать и запоминать указания биологов следующего вида:
север 10
запад 20
юг 30
восток 40
где первое слово — это направление, в котором должна двигаться черепашка, а число после слова — это положительное расстояние в сантиметрах, которое должна пройти черепашка.

Но команды даются быстро, а черепашка ползёт медленно, и программисты догадались, что можно написать программу, которая определит, куда в итоге биологи приведут черепашку. Для этого программисты просят вас написать программу, которая выведет точку, в которой окажется черепашка после всех команд. Для простоты они решили считать, что движение начинается в точке (0, 0), и движение на восток увеличивает первую координату, а на север — вторую.

Программе подаётся на вход число команд n
, которые нужно выполнить черепашке, после чего n

строк с самими командами. Вывести нужно два числа в одну строку: первую и вторую координату конечной точки черепашки. Все координаты целочисленные.

Sample Input:

4
север 10
запад 20
юг 30
восток 40

Sample Output:

20 -20
"""
n=int(input())
x=0
y=0
for i in range(n):
	p=input().split()
	if p[0]=='север':
		y+=int(p[1])
	elif p[0]=='юг':
		y-=int(p[1])
	elif p[0]=='восток':
		x+=int(p[1])
	else:
		x-=int(p[1])
print(x,y)

"""
Дан файл с таблицей в формате TSV с информацией о росте школьников разных классов.

Напишите программу, которая прочитает этот файл и подсчитает для каждого класса средний рост учащегося.

Файл состоит из набора строк, каждая из которых представляет собой три поля:
Класс Фамилия Рост

Класс обозначается только числом. Буквенные модификаторы не используются. Номер класса может быть от 1 до 11 включительно. В фамилии нет пробелов, а в качестве роста используется натуральное число, но при подсчёте среднего требуется вычислить значение в виде вещественного числа.

Выводить информацию о среднем росте следует в порядке возрастания номера класса (для классов с первого по одиннадцатый). Если про какой-то класс нет информации, необходимо вывести напротив него прочерк, например:

Sample Input:

6	Вяххи	159
11	Федотов	172
7	Бондарев	158
6	Чайкина	153

Sample Output:

1 -
2 -
3 -
4 -
5 -
6 156.0
7 158.0
8 -
9 -
10 -
11 172.0
"""

"""
Напишите программу, которая подключает модуль math и, используя значение числа π

из этого модуля, находит для переданного ей на стандартный ввод радиуса круга периметр этого круга и выводит его на стандартный вывод.

Sample Input:

10.0

Sample Output:

62.83185307179586
"""
import math
print(2*math.pi*float(input()))

"""
Напишите программу, которая запускается из консоли и печатает значения всех переданных аргументов на экран (имя скрипта выводить не нужно). Не изменяйте порядок аргументов при выводе.

Для доступа к аргументам командной строки программы подключите модуль sys и используйте переменную argv из этого модуля.

Пример работы программы:

> python3 my_solution.py arg1 arg2
arg1 arg2
"""
import sys
for i in range(1,len(sys.argv)):
    print(sys.argv[i],end=' ')

"""
Напишите функцию update_dictionary(d, key, value), которая принимает на вход словарь d и два числа: key и value

.

Если ключ key
есть в словаре d, то добавьте значение value в список, который хранится по этому ключу.
Если ключа key нет в словаре, то нужно добавить значение в список по ключу 2⋅key. Если и ключа 2⋅key нет, то нужно добавить ключ 2⋅key в словарь и сопоставить ему список из переданного элемента [value]

.

Требуется реализовать только эту функцию, кода вне неё не должно быть.
Функция не должна вызывать внутри себя функции input и print.

Пример работы функции:

d = {}
print(update_dictionary(d, 1, -1))  # None
print(d)                            # {2: [-1]}
update_dictionary(d, 2, -2)
print(d)                            # {2: [-1, -2]}
update_dictionary(d, 1, -3)
print(d)                            # {2: [-1, -2, -3]}
"""
# не добавляйте кода вне функции
def update_dictionary(d, key, value):
    # put your python code here
    if key in d:
        d[key].append(value)
    elif (2*key) in d:
        d[(key*2)].append(value)
    else:
        d[(key*2)]=[value]
# не добавляйте кода вне функции

"""
Когда Антон прочитал «Войну и мир», ему стало интересно, сколько слов и в каком количестве используется в этой книге.

Помогите Антону написать упрощённую версию такой программы, которая сможет подсчитать слова, разделённые пробелом и вывести получившуюся статистику.

Программа должна считывать одну строку со стандартного ввода и выводить для каждого уникального слова в этой строке число его повторений (без учёта регистра) в формате "слово количество" (см. пример вывода).
Порядок вывода слов может быть произвольным, каждое уникальное слово должно выводиться только один раз.

Sample Input 1:

a aa abC aa ac abc bcd a

Sample Output 1:

ac 1
a 2
abc 2
bcd 1
aa 2


Sample Input 2:

a A a

Sample Output 2:

a 3
"""
# put your python code here
s=input()
d={}
for i in s.split():
    if i.lower() in d:
        d[i.lower()]+=1
    else:
        d[i.lower()]=1
for i in d:
    print(i,d[i])

"""
Имеется реализованная функция f(x), принимающая на вход целое число x

, которая вычисляет некоторое целочисленое значение и возвращает его в качестве результата работы.

Функция вычисляется достаточно долго, ничего не выводит на экран, не пишет в файлы и зависит только от переданного аргумента x

.

Напишите программу, которой на вход в первой строке подаётся число n
— количество значений x, для которых требуется узнать значение функции f(x), после чего сами эти n значений, каждое на отдельной строке. Программа должна после каждого введённого значения аргумента вывести соответствующие значения функции f

 на отдельной строке. 

Для ускорения вычисления необходимо сохранять уже вычисленные значения функции при известных аргументах.

Обратите внимание, что в этой задаче установлено достаточно сильное ограничение в две секунды по времени исполнения кода на тесте. 

Sample Input:

5
5
12
9
20
12

Sample Output:

11
41
47
61
41
"""
# Считайте, что функция f(x) уже определена выше. Определять её отдельно не требуется.
n=int(input())
d={}
for i in range(n):
    k=int(input())
    if k in d:
        print(d[k])
    else:
        v=f(k)
        d[k]=v
        print(v)
"""
Напишите функцию f(x), которая возвращает значение следующей функции, определённой на всей числовой прямой:

f(x)=⎧⎩⎨⎪⎪1−(x+2)2,−x2,(x−2)2+1,при x≤−2при −2<x≤2при 2<x

Требуется реализовать только функцию, решение не должно осуществлять операций ввода-вывода.

Sample Input 1:

4.5

Sample Output 1:

7.25


Sample Input 2:

-4.5

Sample Output 2:

-5.25


Sample Input 3:

1

Sample Output 3:

-0.5
"""
def f(x):
    if x<=-2:
        return 1-(x+2)**2
    elif -2<x<=2:
        return -x/2
    else:
        return (x-2)**2+1

"""


Напишите функцию modify_list(l), которая принимает на вход список целых чисел, удаляет из него все нечётные значения, а чётные нацело делит на два. Функция не должна ничего возвращать, требуется только изменение переданного списка, например:

lst = [1, 2, 3, 4, 5, 6]
print(modify_list(lst))  # None
print(lst)               # [1, 2, 3]
modify_list(lst)
print(lst)               # [1]

lst = [10, 5, 8, 3]
modify_list(lst)
print(lst)               # [5, 4]

Функция не должна осуществлять ввод/вывод информации.

"""
def modify_list(l):
	for i in range(len(l)):
		if l[i]%2==1:
			l[i]=-1
	while -1 in l:
		l.remove(-1)
	for i in range(len(l)):
            l[i]=l[i]//2

"""
Напишите программу, которая считывает со стандартного ввода целые числа, по одному числу в строке, и после первого введенного нуля выводит сумму полученных на вход чисел.

Sample Input 1:

5
-3
8
4
0

Sample Output 1:

14


Sample Input 2:

0

Sample Output 2:

0
"""
n=int(input())
s=0
while n!=0:
    s+=n
    n=int(input())
print (s)

"""
В Институте биоинформатики между информатиками и биологами устраивается соревнование. Победителям соревнования достанется большой и вкусный пирог. В команде биологов a человек, а в команде информатиков — b

человек. 

Нужно заранее разрезать пирог таким образом, чтобы можно было раздать кусочки пирога любой команде, выигравшей соревнование, при этом каждому участнику этой команды должно достаться одинаковое число кусочков пирога. И так как не хочется резать пирог на слишком мелкие кусочки, нужно найти минимальное подходящее число.

Напишите программу, которая помогает найти это число.
Программа должна считывать размеры команд (два положительных целых числа a
и b, каждое число вводится на отдельной строке) и выводить наименьшее число d

, которое делится на оба этих числа без остатка.


Sample Input 1:

7
5

Sample Output 1:

35


Sample Input 2:

15
15

Sample Output 2:

15


Sample Input 3:

12
16

Sample Output 3:

48
"""
a=int(input())
b=int(input())
n=1
while not (n%a==0 and n%b==0):
    n+=1
print (n)
"""
Напишите программу, которая считывает целые числа с консоли по одному числу в строке.

Для каждого введённого числа проверить:
если число меньше 10, то пропускаем это число;
если число больше 100, то прекращаем считывать числа;
в остальных случаях вывести это число обратно на консоль в отдельной строке.

Sample Input 1:

12
4
2
58
112

Sample Output 1:

12
58


Sample Input 2:

101

Sample Output 2:


Sample Input 3:

1
2
102

Sample Output 3: 
"""
a=0
while a>=0:
    a=int(input())
    if a<10:
        continue
    if a > 100:
        break
    print(a)
"""
Когда Павел учился в школе, он запоминал таблицу умножения прямоугольными блоками. Для тренировок ему бы очень пригодилась программа, которая показывала бы блок таблицы умножения.

Напишите программу, на вход которой даются четыре числа a
, b, c и d, каждое в своей строке. Программа должна вывести фрагмент таблицы умножения для всех чисел отрезка [a;b] на все числа отрезка [c;d]

.

Числа a
, b, c и d являются натуральными и не превосходят 10, a≤b, c≤d

.

Следуйте формату вывода из примера, для разделения элементов внутри строки используйте '\t' — символ табуляции. Заметьте, что левым столбцом и верхней строкой выводятся сами числа из заданных отрезков — заголовочные столбец и строка таблицы.

Sample Input 1:

7
10
5
6

Sample Output 1:

	5	6
7	35	42
8	40	48
9	45	54
10	50	60


Sample Input 2:

5
5
6
6

Sample Output 2:

	6
5	30


Sample Input 3:

1
3
2
4

Sample Output 3:

	2	3	4
1	2	3	4
2	4	6	8
3	6	9	12
"""
a=int(input())
b=int(input())
c=int(input())
d=int(input())
print('', end='\t'),
for i in range(c,d+1):
    print(i, end='\t')
print()
for i in range(a,b+1):
    print(i, end='\t')
    for j in range(c,d+1):
        print(j*i, end='\t')
    print()

"""
Напишите программу, которая считывает с клавиатуры два числа a и b, считает и выводит на консоль среднее арифметическое всех чисел из отрезка [a;b], которые делятся на 3

.

В приведенном ниже примере среднее арифметическое считается для чисел на отрезке [−5;12]
. Всего чисел, делящихся на 3, на этом отрезке 6: −3,0,3,6,9,12. Их среднее арифметическое равно 4.5

На вход программе подаются интервалы, внутри которых всегда есть хотя бы одно число, которое делится на 3

.

Sample Input:

-5
12

Sample Output:

4.5
"""
a=int(input())
b=int(input())
s=0
c=0
for i in range(a,b+1):
    if i%3==0:
        s+=i
        c+=1
print(s/c)

"""
GC-состав является важной характеристикой геномных последовательностей и определяется как процентное соотношение суммы всех гуанинов и цитозинов к общему числу нуклеиновых оснований в геномной последовательности.

Напишите программу, которая вычисляет процентное содержание символов G (гуанин) и C (цитозин) в введенной строке (программа не должна зависеть от регистра вводимых символов).

Например, в строке "acggtgttat" процентное содержание символов G и C равно 410⋅100=40.0

, где 4 -- это количество символов G и C,  а 10 -- это длина строки.

Sample Input:

acggtgttat

Sample Output:

40.0
"""
s=input()
print((s.lower().count('c')+s.lower().count('g'))*100/len(s))
"""
Узнав, что ДНК не является случайной строкой, только что поступившие в Институт биоинформатики студенты группы информатиков предложили использовать алгоритм сжатия, который сжимает повторяющиеся символы в строке.

Кодирование осуществляется следующим образом:
s = 'aaaabbсaa' преобразуется в 'a4b2с1a2', то есть группы одинаковых символов исходной строки заменяются на этот символ и количество его повторений в этой позиции строки.

Напишите программу, которая считывает строку, кодирует её предложенным алгоритмом и выводит закодированную последовательность на стандартный вывод. Кодирование должно учитывать регистр символов.

Sample Input 1:

aaaabbcaa

Sample Output 1:

a4b2c1a2


Sample Input 2:

abc

Sample Output 2:

a1b1c1
"""
s=input()
p=s[0]
i=1
r=''
for c in s[1:-1]:
    if c==p:
        i+=1
    else:
        r+=p+str(i)
        i=1
    p=c
if len(s)>1:
    if s[-1]==p:
        i+=1
    else:
        r+=p+str(i)
        i=1
r+=s[-1]+str(i)
print(r)

"""
Напишите программу, на вход которой подается одна строка с целыми числами. Программа должна вывести сумму этих чисел.

Используйте метод split строки.

Sample Input:

4 -1 9 3

Sample Output:

15
"""
s=0
for i in input().split():
    s+=int(i)
print(s)
"""
Напишите программу, на вход которой подаётся список чисел одной строкой. Программа должна для каждого элемента этого списка вывести сумму двух его соседей. Для элементов списка, являющихся крайними, одним из соседей считается элемент, находящий на противоположном конце этого списка. Например, если на вход подаётся список "1 3 5 6 10", то на выход ожидается список "13 6 9 15 7" (без кавычек).

Если на вход пришло только одно число, надо вывести его же.

Вывод должен содержать одну строку с числами нового списка, разделёнными пробелом.

Sample Input 1:

1 3 5 6 10

Sample Output 1:

13 6 9 15 7


Sample Input 2:

10

Sample Output 2:

10
"""
s=input()
a=s.split()
b=[]
if len(a)==1:
    print(s)
else:
    for i in range(len(a)-1):
        b.append(int(a[i-1])+int(a[i+1]))
    b.append(int(a[0])+int(a[len(a)-2]))
    for n in b:
        print(n, end=' ')

"""
Напишите программу, которая принимает на вход список чисел в одной строке и выводит на экран в одну строку значения, которые повторяются в нём более одного раза.

Для решения задачи может пригодиться метод sort списка.

Выводимые числа не должны повторяться, порядок их вывода может быть произвольным.

Sample Input 1:

4 8 0 3 4 2 0 3

Sample Output 1:

0 3 4


Sample Input 2:

10

Sample Output 2:


Sample Input 3:

1 1 2 2 3 3

Sample Output 3:

1 2 3


Sample Input 4:

1 1 1 1 1 2 2 2

Sample Output 4:

1 2
"""
s=input()
a=[int(i) for i in sorted(s.split())]
b=[]
if len(a)==1:
    print('')
else:
    for i in range(1,len(a)):
        if a[i-1]==a[i] and a[i] not in b:
            b.append(a[i-1])
    if len(b) > 0:
        for n in b:
            print(n, end=' ')
    else:
        print('')

"""
Напишите программу, которая считывает с консоли числа (по одному в строке) до тех пор, пока сумма введённых чисел не будет равна 0 и сразу после этого выводит сумму квадратов всех считанных чисел.

Гарантируется, что в какой-то момент сумма введённых чисел окажется равной 0, после этого считывание продолжать не нужно.

В примере мы считываем числа 1, -3, 5, -6, -10, 13; в этот момент замечаем, что сумма этих чисел равна нулю и выводим сумму их квадратов, не обращая внимания на то, что остались ещё не прочитанные значения.

Sample Input:

1
-3
5
-6
-10
13
4
-8

Sample Output:

340
"""
s=int(input())
p=s*s
while s!=0:
    i=int(input())
    s+=i
    p+=i*i
print(p)
"""
Напишите программу, которая выводит часть последовательности 1 2 2 3 3 3 4 4 4 4 5 5 5 5 5 ... (число повторяется столько раз, чему равно). На вход программе передаётся положительное целое число n — столько элементов последовательности должна отобразить программа. На выходе ожидается последовательность чисел, записанных через пробел в одну строку. 

Например, если n = 7, то программа должна вывести 1 2 2 3 3 3 4.

Sample Input:

7

Sample Output:

1 2 2 3 3 3 4
"""
n=int(input())
b=[]
i=1
while i<=n:
	for c in range(i):
		b.append(i)
	i+=1
for i in range(n):
	print(b[i],end=' ')

"""
Напишите программу, которая считывает список чисел lst из первой строки и число x из второй строки, которая выводит все позиции, на которых встречается число x в переданном списке lst

.

Позиции нумеруются с нуля, если число x

не встречается в списке, вывести строку "Отсутствует" (без кавычек, с большой буквы).

Позиции должны быть выведены в одну строку, по возрастанию абсолютного значения.

Sample Input 1:

5 8 2 7 8 8 2 4
8

Sample Output 1:

1 4 5


Sample Input 2:

5 8 2 7 8 8 2 4
10

Sample Output 2:

Отсутствует
"""
l=[int(i) for i in input().split()]
n=int(input())
b=[]
for i in range(len(l)):
	if l[i]==n:
		b.append(i)
if len(b)==0:
	print("Отсутствует")
else:
	for i in b:
		print(i,end=' ')

"""
Напишите программу, на вход которой подаётся прямоугольная матрица в виде последовательности строк, заканчивающихся строкой, содержащей только строку "end" (без кавычек)

Программа должна вывести матрицу того же размера, у которой каждый элемент в позиции i, j равен сумме элементов первой матрицы на позициях (i-1, j), (i+1, j), (i, j-1), (i, j+1). У крайних символов соседний элемент находится с противоположной стороны матрицы.

В случае одной строки/столбца элемент сам себе является соседом по соответствующему направлению.

Sample Input 1:

9 5 3
0 7 -1
-5 2 9
end

Sample Output 1:

3 21 22
10 6 19
20 16 -1


Sample Input 2:

1
end

Sample Output 2:

4
"""
s=input()
b=[]
c=[]
while s!='end':
    b.append([int(i) for i in s.split()])
    c.append([int(i) for i in s.split()])
    s=input()
#print(len(b))
#print(len(b[0]))
for i in range(len(b)):
    for j in range(len(b[i])):
        if (i==(len(b)-1)) and (j!=(len(b[i])-1)):
            #print('a',i,j,b[i-1][j]+b[0][j]+b[i][j-1]+b[i][j+1])
            c[i][j]=b[i-1][j]+b[0][j]+b[i][j-1]+b[i][j+1]
        elif (i!=(len(b)-1)) and (j==(len(b[i])-1)):
            #print('b',i,j,b[i-1][j]+b[i+1][j]+b[i][j-1]+b[i][0])
            c[i][j]=b[i-1][j]+b[i+1][j]+b[i][j-1]+b[i][0]
        elif (i==(len(b)-1)) and (j==(len(b[i])-1)):
            #print('c',i,j,b[i-1][j]+b[0][j]+b[i][j-1]+b[i][0])
            c[i][j]=b[i-1][j]+b[0][j]+b[i][j-1]+b[i][0]
        else:
            #print('d',i,j,b[i-1][j]+b[i+1][j]+b[i][j-1]+b[i][j+1])
            c[i][j]=b[i-1][j]+b[i+1][j]+b[i][j-1]+b[i][j+1]
for i in c:
    for j in i:
        print(j,end=' ')
    print()
"""
Выведите таблицу размером n×n, заполненную числами от 1 до n2 по спирали, выходящей из левого верхнего угла и закрученной по часовой стрелке, как показано в примере (здесь n=5):

Sample Input:

5

Sample Output:

1 2 3 4 5
16 17 18 19 6
15 24 25 20 7
14 23 22 21 8
13 12 11 10 9
"""
n=int(input())
a=[[0 for i in range(n)] for j in range(n)]
#b=[i for i in range(1,n*n+1)]
#print(a)
r=0
c=0
k=1
j=0
while k<=n*n:
	for c in range(j,n-j):
		a[r][c]=k
		#print(r,c,k)
		k+=1
	r+=1
	for rr in range(r,n-r+1):
		a[rr][c]=k
		#print(rr,c,k)
		k+=1
	j+=1
	for c in range(n-j-1,j-1-1,-1):
		a[rr][c]=k
		#print(rr,c,k)
		k+=1
	for rr in range(n-r-1,r-1,-1):
		a[rr][c]=k
		#print(rr,c,k)
		k+=1
for i in range(n):
	for j in range(n):
		print(a[i][j],end=' ')
	print()

"""
В то далёкое время, когда Паша ходил в школу, ему очень не нравилась формула Герона для вычисления площади треугольника, так как казалась слишком сложной. В один прекрасный момент Павел решил избавить всех школьников от страданий и написать и распространить по школам программу, вычисляющую площадь треугольника по трём сторонам. 

Одна проблема: так как эта формула не нравилась Павлу, он её не запомнил. Помогите ему завершить доброе дело и напишите программу, вычисляющую площадь треугольника по переданным длинам трёх его сторон по формуле Герона:
S=p(p−a)(p−b)(p−c)‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾√

где p=a+b+c2

– полупериметр треугольника. На вход программе подаются целые числа, выводом программы должно являться вещественное число, соответствующее площади треугольника.

Sample Input:

3
4
5

Sample Output:

6.0
"""
a=int(input())
b=int(input())
c=int(input())
p=(a+b+c)/2
s=(p*(p-a)*(p-b)*(p-c))**(1/2)
print (s)
"""
Напишите программу, принимающую на вход целое число, которая выводит True, если переданное значение попадает в интервал (−15,12]∪(14,17)∪[19,+∞) и False в противном случае (регистр символов имеет значение).

Обратите внимание на разные скобки, используемые для обозначения интервалов. В задании используются полуоткрытые и открытые интервалы. Подробнее про это вы можете прочитать, например, на википедии (полуинтервал, промежуток).

Sample Input 1:

20

Sample Output 1:

True


Sample Input 2:

-20

Sample Output 2:

False
"""
a=int(input())
print ((-15<a<=12) or (14<a<17) or (a>=19))    
"""
Напишите простой калькулятор, который считывает с пользовательского ввода три строки: первое число, второе число и операцию, после чего применяет операцию к введённым числам ("первое число" "операция" "второе число") и выводит результат на экран.

Поддерживаемые операции: +, -, /, *, mod, pow, div, где
mod — это взятие остатка от деления,
pow — возведение в степень,
div — целочисленное деление.

Если выполняется деление и второе число равно 0, необходимо выводить строку "Деление на 0!".

Обратите внимание, что на вход программе приходят вещественные числа.

Sample Input 1:

5.0
0.0
mod

Sample Output 1:

Деление на 0!


Sample Input 2:

-12.0
-8.0
*

Sample Output 2:

96.0


Sample Input 3:

5.0
10.0
/

Sample Output 3:

0.5
"""
a=float(input())
b=float(input())
c=input()
if c=="+":
    print (a+b)
elif c=="-":
    print (a-b)
elif c=="/":
    if b==0:
        print ('Деление на 0!')
    else:
        print(a/b)
elif c=='*':
    print (a*b)
elif c=='mod':
    if b==0:
        print ('Деление на 0!')
    else:
        print (a%b)
elif c=='pow':
    if b==-1:
        print ('Деление на 0!')
    else:
        print (a**b)
elif c=='div':
    if int(b)==0:
        print ('Деление на 0!')
    else:
        print(a//b)
"""
Жители страны Малевии часто экспериментируют с планировкой комнат. Комнаты бывают треугольные, прямоугольные и круглые. Чтобы быстро вычислять жилплощадь, требуется написать программу, на вход которой подаётся тип фигуры комнаты и соответствующие параметры, которая бы выводила площадь получившейся комнаты.
Для числа π в стране Малевии используют значение 3.14.

Формат ввода, который используют Малевийцы:

треугольник
a
b
c

где a, b и c — длины сторон треугольника

прямоугольник
a
b

где a и b — длины сторон прямоугольника

круг
r

где r — радиус окружности

Sample Input 1:

прямоугольник
4
10

Sample Output 1:

40.0


Sample Input 2:

круг
5

Sample Output 2:

78.5


Sample Input 3:

треугольник
3
4
5

Sample Output 3:

6.0
"""
t=input()
if t=='треугольник':
    a=float(input())
    b=float(input())
    c=float(input())
    p=(a+b+c)/2
    s=(p*(p-a)*(p-b)*(p-c))**(1/2)
elif t=='прямоугольник':
    a=float(input())
    b=float(input())
    s=a*b
else:
    r=float(input())
    s=3.14*r*r
print (s)
"""
Напишите программу, которая получает на вход три целых числа, по одному числу в строке, и выводит на консоль в три строки сначала максимальное, потом минимальное, после чего оставшееся число.

На ввод могут подаваться и повторяющиеся числа.

Sample Input 1:

8
2
14

Sample Output 1:

14
2
8


Sample Input 2:

23
23
21

Sample Output 2:

23
21
23
"""
a=int(input())
b=int(input())
c=int(input())
max_=max(a,b,c)
min_=min(a,b,c)
print(max_)
print(min_)
if b<=a<=c:
    print(a)
elif c<=a<=b:
    print(a)
elif a<=b<=c:
    print(b)
elif c<=b<=a:
    print(b)
elif a<=c<=b:
    print(c)
elif b<=c<=a:
    print(c)
"""
В институте биоинформатики по офису передвигается робот. Недавно студенты из группы программистов написали для него программу, по которой робот, когда заходит в комнату, считает количество программистов в ней и произносит его вслух: "n программистов".

Для того, чтобы это звучало правильно, для каждого n

нужно использовать верное окончание слова.

Напишите программу, считывающую с пользовательского ввода целое число n

(неотрицательное), выводящее это число в консоль вместе с правильным образом изменённым словом "программист", для того, чтобы робот мог нормально общаться с людьми, например: 1 программист, 2 программиста, 5 программистов.

В комнате может быть очень много программистов. Проверьте, что ваша программа правильно обработает все случаи, как минимум до 1000 человек.

Дополнительный комментарий к условию:
Обратите внимание, что задача не так проста, как кажется на первый взгляд. Если ваше решение не проходит какой-то тест, это значит, что вы не рассмотрели какой-то из случаев входных данных (число программистов 0≤n≤1000

). Обязательно проверяйте свои решения на дополнительных значениях, а не только на тех, что приведены в условии задания. 

Так как задание повышенной сложности, вручную код решений проверяться не будет. Если вы столкнулись с ошибкой в первых четырёх тестах, проверьте, что вы используете только русские символы для ответа. В остальных случаях ищите ошибку в логике работы программы.

Sample Input 1:

5

Sample Output 1:

5 программистов


Sample Input 2:

0

Sample Output 2:

0 программистов


Sample Input 3:

1

Sample Output 3:

1 программист


Sample Input 4:

2

Sample Output 4:

2 программиста
"""
n=int(input())
if n%10==0 or n%10>=5 or 10<=n<=20 or 11<=n%100<=20:
    print (n,'программистов')
elif n%10==1:
    print (n,'программист')
elif 2<=n%10<=4:
    print (n,'программиста')
"""
Паша очень любит кататься на общественном транспорте, а получая билет, сразу проверяет, счастливый ли ему попался. Билет считается счастливым, если сумма первых трех цифр совпадает с суммой последних трех цифр номера билета.

Однако Паша очень плохо считает в уме, поэтому попросил вас написать программу, которая проверит равенство сумм и выведет "Счастливый", если суммы совпадают, и "Обычный", если суммы различны.

На вход программе подаётся строка из шести цифр.

Выводить нужно только слово "Счастливый" или "Обычный", с большой буквы.

Sample Input 1:

090234

Sample Output 1:

Счастливый


Sample Input 2:

123456

Sample Output 2:

Обычный
"""
n=int(input())
if n%10+n%100//10+n%1000//100==n%10000//1000+n%100000//10000+n//100000:
    print('Счастливый')
else:
    print('Обычный')

